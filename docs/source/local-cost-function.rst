.. _local-cost-function-chapter:

===================
Local Cost Function
===================

EPOS allows for possible plans of an agent to be *ranked* according to various measures of *cost*. In general, plans of lower cost are considered better, more convenient or more comfortable, whereas plans with higher cost are considered worse, less convenient and more uncomfortable. This *cost* can be generated before execution and by the user, such as plan preference, or it can be generated by the agent and while runtime, such as plan indexes. The classes of pre-implemented local cost functions can be found in ``func`` package in the code. Using :ref:`arguments-chapter`, ``-setLocalCostFunc`` indicates your choice of local cost function. In order to create your own global cost funtion, you can use the ``func.VarCostFunction`` class as the template. For more informatin about how to log the global cost, check :ref:`logging-chapter` page.

Must define local cost fucntion :math:`l(\cdot)` as :math:`l \colon \mathbb{R}^{d} \rightarrow \mathbb{R}`.

.. _local-cost-function-index:

Index Local Cost Function
=========================

This is the simplest form of local cost in which the *plan index* indicates the plan cost. In this scenarion, if an agent has 10 local plans, they are indexed from 0-9 in which the index indicates the local cost. In order to use this function, the plan format (vector) needs to be as the following: :math:`<planIndex:planDimension1, ... , planDimensionN>`. If other cost rather than the plan index is intenced to be the local cost, modify the ``_planIndex`` when generating the plans. The exact implementation of the function is given in ``func.IndexCostFunction.java``. It is the subtype of ``PlanCostFunction``.

.. _local-cost-function-discomfort:

Discomfort Local Cost Function
==============================

Depending on the dataset, discomfort can have different meanings. For example in the case of energy usage planning, given that user has multiple alternative plans, the discomfort is how different the alternative plan is to the originally intended one. Another way of defining local cost based on discomfort is define it as :math:`1 / planScore`. A similar implementation of the function is given in ``func.PreferenceCostFunction.java``. It is the subtype of ``PlanCostFunction``.


.. _local-cost-function-preference:

Preference Local Cost Function
==============================

Depending on the dataset, preference can have different meanings. For example in the case of energy usage planning, given that user has multiple alternative plans, the preference is how comfortable (similar) the alternative plan is to the originally intended one. Another way of defining local cost based on discomfort is define it as :math:`1 - planScore`. The exact implementation of the function is given in ``func.PreferenceCostFunction.java``. It is the subtype of ``PlanCostFunction``.